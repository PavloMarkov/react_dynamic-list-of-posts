{"version":3,"sources":["components/PostsList.tsx","utils/fetchClient.ts","components/Loader/Loader.tsx","components/NewCommentForm.tsx","components/PostDetails.tsx","components/UserSelector.tsx","App.tsx","index.tsx"],"names":["PostsList","props","posts","selectPost","selectedPostID","className","map","post","id","title","type","onClick","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","json","client","Loader","NewCommentForm","postId","onAddComment","useState","userName","setUserName","userEmail","setUserEmail","userComment","setUserComment","isCommentLoading","setIsCommentLoading","smthToCleare","some","Boolean","commentToSend","name","email","resetInputValues","onSubmit","event","preventDefault","htmlFor","placeholder","classNames","required","value","onChange","target","comment","res","newCom","finally","disabled","PostDetails","comments","setComments","isLoadingComments","setIsLoadingComments","hasLoadingError","setHasLoadingComments","hasLoadingEnd","setHasLoadingEnd","isWriteComment","setIsWriteComment","useEffect","result","catch","useCallback","prev","length","href","filter","com","UserSelector","userID","setUserID","setPostID","dropdownState","setDropdownState","users","setUsers","user","phone","userToWorkWith","find","state","role","App","selectedUserId","setSelectedUserId","setPosts","isLoadingPosts","setIsLoadingPosts","isLoadingPostsFinished","setIsLoadingPostsFinished","isErrorInLoading","setIsErrorInLoading","setSelectedPostID","handleSelectedUserId","handleSelectedPostID","userId","postToShow","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5b5badc0.chunk.js","sourcesContent":["import React from 'react';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  posts: Post[];\n  selectPost: (id: number) => void;\n  selectedPostID: number;\n};\n\nexport const PostsList: React.FC<Props> = (props) => {\n  const { posts, selectPost, selectedPostID } = props;\n\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {posts.map(post => (\n            <tr\n              data-cy=\"Post\"\n              key={post.id}\n            >\n              <td data-cy=\"PostId\">{post.id}</td>\n\n              <td data-cy=\"PostTitle\">\n                {post.title}\n              </td>\n\n              <td className=\"has-text-right is-vcentered\">\n                {selectedPostID !== post.id\n                  ? (\n                    <button\n                      type=\"button\"\n                      data-cy=\"PostButton\"\n                      className=\"button is-link is-light\"\n                      onClick={() => selectPost(post.id)}\n                    >\n                      Open\n                    </button>\n                  )\n                  : (\n                    <button\n                      type=\"button\"\n                      data-cy=\"PostButton\"\n                      className=\"button is-link\"\n                      onClick={() => selectPost(0)}\n                    >\n                      Close\n                    </button>\n                  )}\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","const BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\nimport { CommentData, Comment } from '../types/Comment';\nimport { client } from '../utils/fetchClient';\n\ntype Props = {\n  postId: number;\n  onAddComment: (comment: Comment) => void;\n};\n\nexport const NewCommentForm: React.FC<Props> = (props) => {\n  const { postId, onAddComment } = props;\n\n  const [userName, setUserName] = useState('');\n  const [userEmail, setUserEmail] = useState('');\n  const [userComment, setUserComment] = useState('');\n  const [isCommentLoading, setIsCommentLoading] = useState(false);\n\n  const smthToCleare = [userName, userEmail, userComment].some(Boolean);\n\n  const commentToSend: CommentData = {\n    name: userName,\n    email: userEmail,\n    body: userComment,\n    postId,\n  };\n\n  const resetInputValues = () => {\n    setUserName('');\n    setUserEmail('');\n    setUserComment('');\n  };\n\n  const handlerAddingComment = (comment: CommentData) => {\n    setIsCommentLoading(true);\n    client.post<Comment>('/comments', comment)\n      .then((res) => {\n        const newCom: Comment = {\n          id: res.id,\n          postId: res.postId,\n          name: res.name,\n          email: res.email,\n          body: res.body,\n        };\n\n        onAddComment(newCom);\n      })\n      .finally(() => {\n        setIsCommentLoading(false);\n        resetInputValues();\n      });\n  };\n\n  return (\n    <form\n      data-cy=\"NewCommentForm\"\n      onSubmit={(event) => event.preventDefault()}\n    >\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={classNames('input', { 'is-danger': !userName })}\n            required\n            value={userName}\n            onChange={(event) => setUserName(event.target.value)}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          <span\n            className={classNames(\n              'icon', 'is-small', 'is-right', { 'has-text-danger': !userName },\n            )}\n            data-cy=\"ErrorIcon\"\n          >\n            <i className=\"fas fa-exclamation-triangle\" />\n          </span>\n        </div>\n\n        {!userName && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={classNames('input', { 'is-danger': !userEmail })}\n            required\n            value={userEmail}\n            onChange={(event) => setUserEmail(event.target.value)}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          <span\n            className={classNames(\n              'icon', 'is-small', 'is-right', { 'has-text-danger': !userEmail },\n            )}\n            data-cy=\"ErrorIcon\"\n          >\n            <i className=\"fas fa-exclamation-triangle\" />\n          </span>\n        </div>\n\n        {!userEmail && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={classNames('textarea', { 'is-danger': !userComment })}\n            required\n            value={userComment}\n            onChange={(event) => setUserComment(event.target.value)}\n          />\n        </div>\n\n        {!userComment && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={classNames(\n              'button',\n              'is-link',\n              { 'is-loading': isCommentLoading },\n            )}\n            onClick={() => handlerAddingComment(commentToSend)}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={resetInputValues}\n            disabled={!smthToCleare}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import React, { useCallback, useEffect, useState } from 'react';\nimport { Post } from '../types/Post';\nimport { Comment } from '../types/Comment';\nimport { client } from '../utils/fetchClient';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\n\ntype Props = {\n  post: Post;\n};\n\nexport const PostDetails: React.FC<Props> = (props) => {\n  const { post } = props;\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [isLoadingComments, setIsLoadingComments] = useState(false);\n  const [hasLoadingError, setHasLoadingComments] = useState(false);\n  const [hasLoadingEnd, setHasLoadingEnd] = useState(false);\n  const [isWriteComment, setIsWriteComment] = useState(false);\n\n  useEffect(\n    () => {\n      setIsLoadingComments(true);\n      client.get<Comment[]>(`/comments?postId=${post.id}`)\n        .then(result => {\n          setComments(result.map(comment => (\n            {\n              id: comment.id,\n              postId: comment.postId,\n              name: comment.name,\n              email: comment.email,\n              body: comment.body,\n            }\n          )));\n        })\n        .catch(() => {\n          setHasLoadingComments(true);\n        })\n        .finally(() => {\n          setIsLoadingComments(false);\n          setHasLoadingEnd(true);\n        });\n    },\n    [post],\n  );\n\n  const onAddComment = useCallback(\n    (comment: Comment) => {\n      setComments(prev => [...prev, comment]);\n      setIsWriteComment(false);\n    },\n    [],\n  );\n\n  const handlerDeleteComment = (id: number) => {\n    client.delete(`/comments/${id}`)\n      .then(res => {\n        if (res) {\n          setComments(prev => (\n            prev.filter(com => com.id !== id)\n          ));\n        }\n      });\n  };\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {`#${post.id}: ${post.title}`}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {post.body}\n          </p>\n        </div>\n\n        <div className=\"block\">\n          {isLoadingComments && <Loader />}\n\n          {hasLoadingError && (\n            <div\n              className=\"notification is-danger\"\n              data-cy=\"CommentsError\"\n            >\n              Something went wrong\n            </div>\n          )}\n\n          {hasLoadingEnd && comments.length === 0 && (\n            <p\n              className=\"title is-4\"\n              data-cy=\"NoCommentsMessage\"\n            >\n              No comments yet\n            </p>\n          )}\n\n          {comments.length > 0 && (\n            <>\n              <p className=\"title is-4\">Comments:</p>\n\n              {comments.map(comment => (\n                <article className=\"message is-small\" data-cy=\"Comment\">\n                  <div className=\"message-header\">\n                    <a href={`mailto:${comment.email}`} data-cy=\"CommentAuthor\">\n                      {comment.name}\n                    </a>\n                    <button\n                      data-cy=\"CommentDelete\"\n                      type=\"button\"\n                      className=\"delete is-small\"\n                      aria-label=\"delete\"\n                      onClick={() => handlerDeleteComment(comment.id)}\n                    >\n                      delete button\n                    </button>\n                  </div>\n\n                  <div\n                    className=\"message-body\"\n                    data-cy=\"CommentBody\"\n                  >\n                    {comment.body}\n                  </div>\n                </article>\n              ))}\n            </>\n          )}\n\n          {!isWriteComment && (\n            <button\n              data-cy=\"WriteCommentButton\"\n              type=\"button\"\n              className=\"button is-link\"\n              onClick={() => setIsWriteComment(true)}\n            >\n              Write a comment\n            </button>\n          )}\n        </div>\n\n        {isWriteComment && (\n          <NewCommentForm\n            postId={post.id}\n            onAddComment={onAddComment}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n","import classNames from 'classnames';\nimport React, { useEffect, useState } from 'react';\nimport { User } from '../types/User';\nimport { client } from '../utils/fetchClient';\n\ntype Props = {\n  userID: number;\n  setUserID: (id: number) => void;\n  setPostID: (id: number) => void;\n};\n\nexport const UserSelector: React.FC<Props> = (props) => {\n  const { userID, setUserID, setPostID } = props;\n  const [dropdownState, setDropdownState] = useState(false);\n  const [users, setUsers] = useState<User[]>([]);\n\n  const handleClick = (id: number) => {\n    setUserID(id);\n    setDropdownState(state => !state);\n    setPostID(0);\n  };\n\n  useEffect(() => {\n    client.get<User[]>('/users')\n      .then(res => setUsers(res.map(user => ({\n        id: user.id,\n        name: user.name,\n        email: user.email,\n        phone: user.phone,\n      }))));\n  }, []);\n\n  const userToWorkWith = users.find(user => user.id === userID) || null;\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className={classNames('dropdown', { 'is-active': dropdownState })}\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={() => setDropdownState(state => !state)}\n        >\n          {userToWorkWith === null\n            ? <span>Choose a user</span>\n            : <span>{userToWorkWith.name}</span>}\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      <div\n        className=\"dropdown-menu\"\n        id=\"dropdown-menu\"\n        role=\"menu\"\n      >\n        <div\n          className=\"dropdown-content\"\n        >\n          {users.map(user => (\n            <a\n              key={user.id}\n              href={`#user-${user.id}`}\n              className={classNames(\n                'dropdown-item',\n                { 'is-active': userID === user.id },\n              )}\n              onClick={() => handleClick(user.id)}\n            >\n              {user.name}\n            </a>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React, { useCallback, useEffect, useState } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { Loader } from './components/Loader';\nimport { Post } from './types/Post';\nimport { client } from './utils/fetchClient';\n\nexport const App: React.FC = () => {\n  const [selectedUserId, setSelectedUserId] = useState(0);\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [isLoadingPosts, setIsLoadingPosts] = useState(false);\n  const [isLoadingPostsFinished, setIsLoadingPostsFinished] = useState(false);\n  const [isErrorInLoading, setIsErrorInLoading] = useState(false);\n  const [selectedPostID, setSelectedPostID] = useState(0);\n\n  const handleSelectedUserId = useCallback((id: number) => {\n    setSelectedUserId(id);\n  }, []);\n\n  const handleSelectedPostID = useCallback((id) => {\n    setSelectedPostID(id);\n  }, []);\n\n  useEffect(\n    () => {\n      if (selectedUserId !== 0) {\n        setIsLoadingPosts(true);\n        client.get<Post[]>(`/posts?userId=${selectedUserId}`)\n          .then(result => {\n            setPosts(result.map(post => ({\n              id: post.id,\n              userId: post.userId,\n              title: post.title,\n              body: post.body,\n            })));\n          })\n          .catch(() => setIsErrorInLoading(true))\n          .finally(() => {\n            setIsLoadingPosts(false);\n            setIsLoadingPostsFinished(true);\n          });\n      }\n    },\n    [selectedUserId],\n  );\n\n  const postToShow = posts.find(post => post.id === selectedPostID) || null;\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  userID={selectedUserId}\n                  setUserID={handleSelectedUserId}\n                  setPostID={handleSelectedPostID}\n                />\n              </div>\n\n              <div\n                className=\"block\"\n                data-cy=\"MainContent\"\n              >\n                {selectedUserId === 0 && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n\n                {isLoadingPosts && <Loader />}\n\n                {selectedUserId !== 0 && (\n                  <>\n                    {isErrorInLoading && (\n                      <div\n                        className=\"notification is-danger\"\n                        data-cy=\"PostsLoadingError\"\n                      >\n                        Something went wrong!\n                      </div>\n                    )}\n\n                    {posts.length === 0 && isLoadingPostsFinished && (\n                      <div\n                        className=\"notification is-warning\"\n                        data-cy=\"NoPostsYet\"\n                      >\n                        No posts yet\n                      </div>\n                    )}\n\n                    {posts.length > 0 && (\n                      <PostsList\n                        posts={posts}\n                        selectPost={handleSelectedPostID}\n                        selectedPostID={selectedPostID}\n                      />\n                    )}\n                  </>\n                )}\n              </div>\n            </div>\n          </div>\n\n          {selectedPostID !== 0 && (\n            <div\n              data-cy=\"Sidebar\"\n              className={classNames(\n                'tile',\n                'is-parent',\n                'is-8-desktop',\n                'Sidebar',\n                { 'Sidebar--open': posts.length > 0 },\n              )}\n            >\n              {postToShow && (\n                <div\n                  className=\"tile is-child box is-success \"\n                >\n                  <PostDetails\n                    post={postToShow}\n                  />\n                </div>\n              )}\n            </div>\n          )}\n        </div>\n      </div>\n    </main>\n  );\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}